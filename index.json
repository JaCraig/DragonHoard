{
  "api/DragonHoard.Core.BaseClasses.CacheBaseClass.html": {
    "href": "api/DragonHoard.Core.BaseClasses.CacheBaseClass.html",
    "title": "Class CacheBaseClass | DragonHoard API Reference",
    "keywords": "Class CacheBaseClass Cache base class Inheritance object CacheBaseClass InMemoryCache MemoryCache Implements ICache IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DragonHoard.Core.BaseClasses Assembly: DragonHoard.Core.dll Syntax public abstract class CacheBaseClass : ICache, IDisposable Constructors | Edit this page View Source CacheBaseClass() Initializes a new instance of the CacheBaseClass class. Declaration protected CacheBaseClass() Properties | Edit this page View Source Name Gets the name. Declaration public abstract string Name { get; } Property Value Type Description string The name. Methods | Edit this page View Source Clone() Clones this instance. Declaration public abstract ICache Clone() Returns Type Description ICache A copy of this cache. | Edit this page View Source Clone<TOption>(TOption) Clones this instance. Declaration public abstract ICache Clone<TOption>(TOption options) Parameters Type Name Description TOption options The options to use for the cache. Returns Type Description ICache A copy of this cache. Type Parameters Name Description TOption The type of the option. | Edit this page View Source Compact(double) Compacts the cache by the specified percentage. Declaration public abstract void Compact(double percentage) Parameters Type Name Description double percentage The percentage. | Edit this page View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public abstract void Dispose() | Edit this page View Source EvictionCallback(object, object?, EvictionReason, object) Called when an item is removed from the index. Declaration protected void EvictionCallback(object key, object? value, EvictionReason reason, object state) Parameters Type Name Description object key The key. object value The value. EvictionReason reason The reason. object state The state. | Edit this page View Source GetByTag<TValue>(string) Gets the by tag. Declaration public TValue[] GetByTag<TValue>(string tag) Parameters Type Name Description string tag The tag. Returns Type Description TValue[] The IEnumerable of items associated with the tag. Type Parameters Name Description TValue The type of the value. | Edit this page View Source Remove(object) Removes the object associated with the specified key. Declaration public void Remove(object key) Parameters Type Name Description object key The key. | Edit this page View Source RemoveByKey(object) Removes the items by the key. Declaration protected abstract void RemoveByKey(object key) Parameters Type Name Description object key The key. | Edit this page View Source RemoveByTag(string) Removes the by tag. Declaration public void RemoveByTag(string tag) Parameters Type Name Description string tag The tag. | Edit this page View Source SetWithOptions<TValue>(object, TValue, CacheEntryOptions) Sets the value with the options sent in. Declaration protected abstract TValue SetWithOptions<TValue>(object key, TValue value, CacheEntryOptions cacheEntryOptions) Parameters Type Name Description object key The key. TValue value The value. CacheEntryOptions cacheEntryOptions The cache entry options. Returns Type Description TValue The value sent in. Type Parameters Name Description TValue The type of the value. | Edit this page View Source Set<TValue>(object, TValue) Sets the specified key/value pair in the cache. Declaration public abstract TValue Set<TValue>(object key, TValue value) Parameters Type Name Description object key The key. TValue value The value. Returns Type Description TValue The value sent in. Type Parameters Name Description TValue The type of the value. | Edit this page View Source Set<TValue>(object, TValue, CacheEntryOptions) Sets the specified key/value pair in the cache. Declaration public TValue Set<TValue>(object key, TValue value, CacheEntryOptions cacheEntryOptions) Parameters Type Name Description object key The key. TValue value The value. CacheEntryOptions cacheEntryOptions The cache entry options. Returns Type Description TValue The value sent in. Type Parameters Name Description TValue The type of the value. | Edit this page View Source Set<TValue>(object, TValue, DateTimeOffset) Sets the specified key/value pair in the cache. Declaration public abstract TValue Set<TValue>(object key, TValue value, DateTimeOffset absoluteExpiration) Parameters Type Name Description object key The key. TValue value The value. DateTimeOffset absoluteExpiration The absolute expiration. Returns Type Description TValue The value sent in. Type Parameters Name Description TValue The type of the value. | Edit this page View Source Set<TValue>(object, TValue, TimeSpan, bool) Sets the specified key/value pair in the cache. Declaration public abstract TValue Set<TValue>(object key, TValue value, TimeSpan expirationRelativeToNow, bool sliding = false) Parameters Type Name Description object key The key. TValue value The value. TimeSpan expirationRelativeToNow The expiration relative to now. bool sliding if set to true [sliding] expiration. Returns Type Description TValue The value sent in. Type Parameters Name Description TValue The type of the value. | Edit this page View Source TryGetValue<TValue>(object, out TValue) Tries to get the value based on the key. Declaration public abstract bool TryGetValue<TValue>(object key, out TValue value) Parameters Type Name Description object key The key. TValue value The value. Returns Type Description bool True if it is successful, false otherwise Type Parameters Name Description TValue The type of the value. Implements ICache IDisposable"
  },
  "api/DragonHoard.Core.BaseClasses.html": {
    "href": "api/DragonHoard.Core.BaseClasses.html",
    "title": "Namespace DragonHoard.Core.BaseClasses | DragonHoard API Reference",
    "keywords": "Namespace DragonHoard.Core.BaseClasses Classes CacheBaseClass Cache base class"
  },
  "api/DragonHoard.Core.Cache.html": {
    "href": "api/DragonHoard.Core.Cache.html",
    "title": "Class Cache | DragonHoard API Reference",
    "keywords": "Class Cache Cache manager class Inheritance object Cache Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DragonHoard.Core Assembly: DragonHoard.Core.dll Syntax public class Cache : IDisposable Constructors | Edit this page View Source Cache(IEnumerable<ICache>) Initializes a new instance of the Cache class. Declaration public Cache(IEnumerable<ICache> caches) Parameters Type Name Description IEnumerable<ICache> caches The caches. Exceptions Type Condition ArgumentException No caches were found in the system. Please register one prior to initializing. See Also IDisposable Methods | Edit this page View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() See Also IDisposable | Edit this page View Source Dispose(bool) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. See Also IDisposable | Edit this page View Source GetOrAddCache(string) Gets the or add cache. Declaration public ICache? GetOrAddCache(string name = \"Default\") Parameters Type Name Description string name The name. Returns Type Description ICache See Also IDisposable | Edit this page View Source GetOrAddCache<TOptions>(TOptions, string) Gets the or add cache. Declaration public ICache? GetOrAddCache<TOptions>(TOptions options, string name = \"Default\") Parameters Type Name Description TOptions options The options the cache should use. string name The name. Returns Type Description ICache The cache specified. Type Parameters Name Description TOptions The type of the options. See Also IDisposable Implements IDisposable See Also IDisposable"
  },
  "api/DragonHoard.Core.CacheEntryOptions.html": {
    "href": "api/DragonHoard.Core.CacheEntryOptions.html",
    "title": "Class CacheEntryOptions | DragonHoard API Reference",
    "keywords": "Class CacheEntryOptions Cache entry options Inheritance object CacheEntryOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DragonHoard.Core Assembly: DragonHoard.Core.dll Syntax public class CacheEntryOptions Properties | Edit this page View Source AbsoluteExpiration Gets or sets the absolute expiration. Declaration public DateTimeOffset? AbsoluteExpiration { get; set; } Property Value Type Description DateTimeOffset? The absolute expiration. | Edit this page View Source AbsoluteExpirationRelativeToNow Gets or sets the absolute expiration relative to now. Declaration public TimeSpan? AbsoluteExpirationRelativeToNow { get; set; } Property Value Type Description TimeSpan? The absolute expiration relative to now. | Edit this page View Source Priority Gets or sets the priority. Declaration public CachePriority Priority { get; set; } Property Value Type Description CachePriority The priority. | Edit this page View Source Size Gets or sets the size. Declaration public long? Size { get; set; } Property Value Type Description long? The size. | Edit this page View Source SlidingExpiration Gets or sets the sliding expiration. Declaration public TimeSpan? SlidingExpiration { get; set; } Property Value Type Description TimeSpan? The sliding expiration. | Edit this page View Source Tags Gets or sets the tags associated with this entry. Declaration public string[]? Tags { get; set; } Property Value Type Description string[] The tags associated with this entry."
  },
  "api/DragonHoard.Core.CachePriority.html": {
    "href": "api/DragonHoard.Core.CachePriority.html",
    "title": "Enum CachePriority | DragonHoard API Reference",
    "keywords": "Enum CachePriority Cache priority Namespace: DragonHoard.Core Assembly: DragonHoard.Core.dll Syntax public enum CachePriority Fields Name Description High The high priority Low The low priority Normal The normal priority"
  },
  "api/DragonHoard.Core.CanisterModules.RegistrationModule.html": {
    "href": "api/DragonHoard.Core.CanisterModules.RegistrationModule.html",
    "title": "Class RegistrationModule | DragonHoard API Reference",
    "keywords": "Class RegistrationModule Registration module Inheritance object RegistrationModule Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DragonHoard.Core.CanisterModules Assembly: DragonHoard.Core.dll Syntax public class RegistrationModule : IModule Properties | Edit this page View Source Order Order to run this in Declaration public int Order { get; } Property Value Type Description int See Also IModule Methods | Edit this page View Source Load(IServiceCollection?) Loads the module using the bootstrapper Declaration public void Load(IServiceCollection? bootstrapper) Parameters Type Name Description IServiceCollection bootstrapper The bootstrapper. See Also IModule Implements IModule See Also IModule"
  },
  "api/DragonHoard.Core.CanisterModules.html": {
    "href": "api/DragonHoard.Core.CanisterModules.html",
    "title": "Namespace DragonHoard.Core.CanisterModules | DragonHoard API Reference",
    "keywords": "Namespace DragonHoard.Core.CanisterModules Classes RegistrationModule Registration module"
  },
  "api/DragonHoard.Core.Interfaces.ICache.html": {
    "href": "api/DragonHoard.Core.Interfaces.ICache.html",
    "title": "Interface ICache | DragonHoard API Reference",
    "keywords": "Interface ICache Cache interface Inherited Members IDisposable.Dispose() Namespace: DragonHoard.Core.Interfaces Assembly: DragonHoard.Core.dll Syntax public interface ICache : IDisposable Properties | Edit this page View Source Name Gets the name. Declaration string Name { get; } Property Value Type Description string The name. See Also IDisposable Methods | Edit this page View Source Clone() Clones this instance. Declaration ICache Clone() Returns Type Description ICache A copy of this cache. See Also IDisposable | Edit this page View Source Clone<TOption>(TOption) Clones this instance. Declaration ICache Clone<TOption>(TOption options) Parameters Type Name Description TOption options The options to use for the cache. Returns Type Description ICache A copy of this cache. Type Parameters Name Description TOption The type of the option. See Also IDisposable | Edit this page View Source Compact(double) Compacts the cache by the specified percentage. Declaration void Compact(double percentage) Parameters Type Name Description double percentage The percentage. See Also IDisposable | Edit this page View Source GetByTag<TValue>(string) Gets the by tag. Declaration TValue[] GetByTag<TValue>(string tag) Parameters Type Name Description string tag The tag. Returns Type Description TValue[] The IEnumerable of items associated with the tag. Type Parameters Name Description TValue The type of the value. See Also IDisposable | Edit this page View Source Remove(object) Removes the object associated with the specified key. Declaration void Remove(object key) Parameters Type Name Description object key The key. See Also IDisposable | Edit this page View Source RemoveByTag(string) Removes the by tag. Declaration void RemoveByTag(string tag) Parameters Type Name Description string tag The tag. See Also IDisposable | Edit this page View Source Set<TValue>(object, TValue) Sets the specified key/value pair in the cache. Declaration TValue Set<TValue>(object key, TValue value) Parameters Type Name Description object key The key. TValue value The value. Returns Type Description TValue The value sent in. Type Parameters Name Description TValue The type of the value. See Also IDisposable | Edit this page View Source Set<TValue>(object, TValue, CacheEntryOptions) Sets the specified key/value pair in the cache. Declaration TValue Set<TValue>(object key, TValue value, CacheEntryOptions cacheEntryOptions) Parameters Type Name Description object key The key. TValue value The value. CacheEntryOptions cacheEntryOptions The cache entry options. Returns Type Description TValue The value sent in. Type Parameters Name Description TValue The type of the value. See Also IDisposable | Edit this page View Source Set<TValue>(object, TValue, DateTimeOffset) Sets the specified key/value pair in the cache. Declaration TValue Set<TValue>(object key, TValue value, DateTimeOffset absoluteExpiration) Parameters Type Name Description object key The key. TValue value The value. DateTimeOffset absoluteExpiration The absolute expiration. Returns Type Description TValue The value sent in. Type Parameters Name Description TValue The type of the value. See Also IDisposable | Edit this page View Source Set<TValue>(object, TValue, TimeSpan, bool) Sets the specified key/value pair in the cache. Declaration TValue Set<TValue>(object key, TValue value, TimeSpan expirationRelativeToNow, bool sliding = false) Parameters Type Name Description object key The key. TValue value The value. TimeSpan expirationRelativeToNow The expiration relative to now. bool sliding if set to true [sliding] expiration. Returns Type Description TValue The value sent in. Type Parameters Name Description TValue The type of the value. See Also IDisposable | Edit this page View Source TryGetValue<TValue>(object, out TValue) Tries to get the value based on the key. Declaration bool TryGetValue<TValue>(object key, out TValue value) Parameters Type Name Description object key The key. TValue value The value. Returns Type Description bool True if it is successful, false otherwise Type Parameters Name Description TValue The type of the value. See Also IDisposable See Also IDisposable"
  },
  "api/DragonHoard.Core.Interfaces.html": {
    "href": "api/DragonHoard.Core.Interfaces.html",
    "title": "Namespace DragonHoard.Core.Interfaces | DragonHoard API Reference",
    "keywords": "Namespace DragonHoard.Core.Interfaces Interfaces ICache Cache interface"
  },
  "api/DragonHoard.Core.html": {
    "href": "api/DragonHoard.Core.html",
    "title": "Namespace DragonHoard.Core | DragonHoard API Reference",
    "keywords": "Namespace DragonHoard.Core Classes Cache Cache manager class CacheEntryOptions Cache entry options Enums CachePriority Cache priority"
  },
  "api/DragonHoard.InMemory.InMemoryCache.html": {
    "href": "api/DragonHoard.InMemory.InMemoryCache.html",
    "title": "Class InMemoryCache | DragonHoard API Reference",
    "keywords": "Class InMemoryCache In memory cache Inheritance object CacheBaseClass InMemoryCache Implements ICache IDisposable Inherited Members CacheBaseClass.GetByTag<TValue>(string) CacheBaseClass.Remove(object) CacheBaseClass.RemoveByTag(string) CacheBaseClass.Set<TValue>(object, TValue, CacheEntryOptions) CacheBaseClass.EvictionCallback(object, object, EvictionReason, object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DragonHoard.InMemory Assembly: DragonHoard.InMemory.dll Syntax public class InMemoryCache : CacheBaseClass, ICache, IDisposable Constructors | Edit this page View Source InMemoryCache(IEnumerable<IOptions<InMemoryCacheOptions>>) Initializes a new instance of the InMemoryCache class. Declaration public InMemoryCache(IEnumerable<IOptions<InMemoryCacheOptions>> options) Parameters Type Name Description IEnumerable<IOptions<InMemoryCacheOptions>> options The options. See Also ICache Properties | Edit this page View Source Name Gets the name. Declaration public override string Name { get; } Property Value Type Description string The name. Overrides CacheBaseClass.Name See Also ICache Methods | Edit this page View Source Clone() Clones this instance. Declaration public override ICache Clone() Returns Type Description ICache A copy of this cache. Overrides CacheBaseClass.Clone() See Also ICache | Edit this page View Source Clone<TOption>(TOption) Clones this instance. Declaration public override ICache Clone<TOption>(TOption options) Parameters Type Name Description TOption options The options to use for the cache. Returns Type Description ICache A copy of this cache. Type Parameters Name Description TOption The type of the option. Overrides CacheBaseClass.Clone<TOption>(TOption) See Also ICache | Edit this page View Source Compact(double) Compacts the specified percentage. Declaration public override void Compact(double percentage) Parameters Type Name Description double percentage The percentage. Overrides CacheBaseClass.Compact(double) See Also ICache | Edit this page View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides CacheBaseClass.Dispose() See Also ICache | Edit this page View Source RemoveByKey(object) Removes the items by the key. Declaration protected override void RemoveByKey(object key) Parameters Type Name Description object key The key. Overrides CacheBaseClass.RemoveByKey(object) See Also ICache | Edit this page View Source SetWithOptions<TValue>(object, TValue, CacheEntryOptions) Sets the value with the options sent in. Declaration protected override TValue SetWithOptions<TValue>(object key, TValue value, CacheEntryOptions cacheEntryOptions) Parameters Type Name Description object key The key. TValue value The value. CacheEntryOptions cacheEntryOptions The cache entry options. Returns Type Description TValue The value sent in. Type Parameters Name Description TValue The type of the value. Overrides CacheBaseClass.SetWithOptions<TValue>(object, TValue, CacheEntryOptions) See Also ICache | Edit this page View Source Set<TValue>(object, TValue) Sets the specified key/value pair in the cache. Declaration public override TValue Set<TValue>(object key, TValue value) Parameters Type Name Description object key The key. TValue value The value. Returns Type Description TValue The value sent in. Type Parameters Name Description TValue The type of the value. Overrides CacheBaseClass.Set<TValue>(object, TValue) See Also ICache | Edit this page View Source Set<TValue>(object, TValue, DateTimeOffset) Sets the specified key/value pair in the cache. Declaration public override TValue Set<TValue>(object key, TValue value, DateTimeOffset absoluteExpiration) Parameters Type Name Description object key The key. TValue value The value. DateTimeOffset absoluteExpiration The absolute expiration. Returns Type Description TValue The value sent in. Type Parameters Name Description TValue The type of the value. Overrides CacheBaseClass.Set<TValue>(object, TValue, DateTimeOffset) See Also ICache | Edit this page View Source Set<TValue>(object, TValue, TimeSpan, bool) Sets the specified key/value pair in the cache. Declaration public override TValue Set<TValue>(object key, TValue value, TimeSpan expirationRelativeToNow, bool sliding = false) Parameters Type Name Description object key The key. TValue value The value. TimeSpan expirationRelativeToNow The expiration relative to now. bool sliding if set to true [sliding] expiration. Returns Type Description TValue The value sent in. Type Parameters Name Description TValue The type of the value. Overrides CacheBaseClass.Set<TValue>(object, TValue, TimeSpan, bool) See Also ICache | Edit this page View Source TryGetValue<TValue>(object, out TValue) Tries to get the value based on the key. Declaration public override bool TryGetValue<TValue>(object key, out TValue value) Parameters Type Name Description object key The key. TValue value The value. Returns Type Description bool True if it is successful, false otherwise Type Parameters Name Description TValue The type of the value. Overrides CacheBaseClass.TryGetValue<TValue>(object, out TValue) See Also ICache Implements ICache IDisposable See Also ICache"
  },
  "api/DragonHoard.InMemory.InMemoryCacheOptions.html": {
    "href": "api/DragonHoard.InMemory.InMemoryCacheOptions.html",
    "title": "Class InMemoryCacheOptions | DragonHoard API Reference",
    "keywords": "Class InMemoryCacheOptions In memory cache options Inheritance object InMemoryCacheOptions Implements IOptions<InMemoryCacheOptions> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DragonHoard.InMemory Assembly: DragonHoard.InMemory.dll Syntax public class InMemoryCacheOptions : IOptions<InMemoryCacheOptions> Properties | Edit this page View Source CompactionPercentage Gets or sets the compaction percentage. Declaration public double? CompactionPercentage { get; set; } Property Value Type Description double? The compaction percentage. See Also IOptions<TOptions> | Edit this page View Source Default Gets the default. Declaration public static InMemoryCacheOptions Default { get; } Property Value Type Description InMemoryCacheOptions The default. See Also IOptions<TOptions> | Edit this page View Source MaxCacheSize Gets or sets the maximum size. Declaration public long? MaxCacheSize { get; set; } Property Value Type Description long? The maximum size. See Also IOptions<TOptions> | Edit this page View Source ScanFrequency Gets or sets the scan frequency. Declaration public TimeSpan ScanFrequency { get; set; } Property Value Type Description TimeSpan The scan frequency. See Also IOptions<TOptions> | Edit this page View Source Value Gets the default configured Options instance. Declaration public InMemoryCacheOptions Value { get; } Property Value Type Description InMemoryCacheOptions See Also IOptions<TOptions> Implements IOptions<TOptions> See Also IOptions<TOptions>"
  },
  "api/DragonHoard.InMemory.html": {
    "href": "api/DragonHoard.InMemory.html",
    "title": "Namespace DragonHoard.InMemory | DragonHoard API Reference",
    "keywords": "Namespace DragonHoard.InMemory Classes InMemoryCache In memory cache InMemoryCacheOptions In memory cache options"
  },
  "api/DragonHoard.MicrosoftExtensionsCachingMemory.CanisterModules.MemoryRegistration.html": {
    "href": "api/DragonHoard.MicrosoftExtensionsCachingMemory.CanisterModules.MemoryRegistration.html",
    "title": "Class MemoryRegistration | DragonHoard API Reference",
    "keywords": "Class MemoryRegistration Memory reg module Inheritance object MemoryRegistration Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DragonHoard.MicrosoftExtensionsCachingMemory.CanisterModules Assembly: DragonHoard.Microsoft.Extensions.Caching.Memory.dll Syntax public class MemoryRegistration : IModule Properties | Edit this page View Source Order Order to run this in Declaration public int Order { get; } Property Value Type Description int See Also IModule Methods | Edit this page View Source Load(IServiceCollection?) Loads the module using the bootstrapper Declaration public void Load(IServiceCollection? bootstrapper) Parameters Type Name Description IServiceCollection bootstrapper The bootstrapper. See Also IModule Implements IModule See Also IModule"
  },
  "api/DragonHoard.MicrosoftExtensionsCachingMemory.CanisterModules.html": {
    "href": "api/DragonHoard.MicrosoftExtensionsCachingMemory.CanisterModules.html",
    "title": "Namespace DragonHoard.MicrosoftExtensionsCachingMemory.CanisterModules | DragonHoard API Reference",
    "keywords": "Namespace DragonHoard.MicrosoftExtensionsCachingMemory.CanisterModules Classes MemoryRegistration Memory reg module"
  },
  "api/DragonHoard.MicrosoftExtensionsCachingMemory.MemoryCache.html": {
    "href": "api/DragonHoard.MicrosoftExtensionsCachingMemory.MemoryCache.html",
    "title": "Class MemoryCache | DragonHoard API Reference",
    "keywords": "Class MemoryCache In memory cache Inheritance object CacheBaseClass MemoryCache Implements ICache IDisposable Inherited Members CacheBaseClass.GetByTag<TValue>(string) CacheBaseClass.Remove(object) CacheBaseClass.RemoveByTag(string) CacheBaseClass.Set<TValue>(object, TValue, CacheEntryOptions) CacheBaseClass.EvictionCallback(object, object, EvictionReason, object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DragonHoard.MicrosoftExtensionsCachingMemory Assembly: DragonHoard.Microsoft.Extensions.Caching.Memory.dll Syntax public class MemoryCache : CacheBaseClass, ICache, IDisposable Constructors | Edit this page View Source MemoryCache(IMemoryCache) Initializes a new instance of the MemoryCache class. Declaration public MemoryCache(IMemoryCache memoryCache) Parameters Type Name Description IMemoryCache memoryCache The memory cache. See Also ICache Properties | Edit this page View Source Name Gets the name. Declaration public override string Name { get; } Property Value Type Description string The name. Overrides CacheBaseClass.Name See Also ICache Methods | Edit this page View Source Clone() Clones this instance. Declaration public override ICache Clone() Returns Type Description ICache A copy of this cache. Overrides CacheBaseClass.Clone() See Also ICache | Edit this page View Source Clone<TOption>(TOption) Clones this instance. Declaration public override ICache Clone<TOption>(TOption options) Parameters Type Name Description TOption options The options to use for the cache. Returns Type Description ICache A copy of this cache. Type Parameters Name Description TOption The type of the option. Overrides CacheBaseClass.Clone<TOption>(TOption) See Also ICache | Edit this page View Source Compact(double) Compacts the cache by the specified percentage. Declaration public override void Compact(double percentage) Parameters Type Name Description double percentage The percentage. Overrides CacheBaseClass.Compact(double) See Also ICache | Edit this page View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides CacheBaseClass.Dispose() See Also ICache | Edit this page View Source RemoveByKey(object) Removes the items by the key. Declaration protected override void RemoveByKey(object key) Parameters Type Name Description object key The key. Overrides CacheBaseClass.RemoveByKey(object) See Also ICache | Edit this page View Source SetWithOptions<TValue>(object, TValue, CacheEntryOptions) Sets the value with the options sent in. Declaration protected override TValue SetWithOptions<TValue>(object key, TValue value, CacheEntryOptions cacheEntryOptions) Parameters Type Name Description object key The key. TValue value The value. CacheEntryOptions cacheEntryOptions The cache entry options. Returns Type Description TValue The value sent in. Type Parameters Name Description TValue The type of the value. Overrides CacheBaseClass.SetWithOptions<TValue>(object, TValue, CacheEntryOptions) See Also ICache | Edit this page View Source Set<TValue>(object, TValue) Sets the specified key/value pair in the cache. Declaration public override TValue Set<TValue>(object key, TValue value) Parameters Type Name Description object key The key. TValue value The value. Returns Type Description TValue The value sent in. Type Parameters Name Description TValue The type of the value. Overrides CacheBaseClass.Set<TValue>(object, TValue) See Also ICache | Edit this page View Source Set<TValue>(object, TValue, DateTimeOffset) Sets the specified key/value pair in the cache. Declaration public override TValue Set<TValue>(object key, TValue value, DateTimeOffset absoluteExpiration) Parameters Type Name Description object key The key. TValue value The value. DateTimeOffset absoluteExpiration The absolute expiration. Returns Type Description TValue The value sent in. Type Parameters Name Description TValue The type of the value. Overrides CacheBaseClass.Set<TValue>(object, TValue, DateTimeOffset) See Also ICache | Edit this page View Source Set<TValue>(object, TValue, TimeSpan, bool) Sets the specified key/value pair in the cache. Declaration public override TValue Set<TValue>(object key, TValue value, TimeSpan expirationRelativeToNow, bool sliding = false) Parameters Type Name Description object key The key. TValue value The value. TimeSpan expirationRelativeToNow The expiration relative to now. bool sliding if set to true [sliding] expiration. Returns Type Description TValue The value sent in. Type Parameters Name Description TValue The type of the value. Overrides CacheBaseClass.Set<TValue>(object, TValue, TimeSpan, bool) See Also ICache | Edit this page View Source TryGetValue<TValue>(object, out TValue) Tries to get the value based on the key. Declaration public override bool TryGetValue<TValue>(object key, out TValue value) Parameters Type Name Description object key The key. TValue value The value. Returns Type Description bool True if it is successful, false otherwise Type Parameters Name Description TValue The type of the value. Overrides CacheBaseClass.TryGetValue<TValue>(object, out TValue) See Also ICache Implements ICache IDisposable See Also ICache"
  },
  "api/DragonHoard.MicrosoftExtensionsCachingMemory.html": {
    "href": "api/DragonHoard.MicrosoftExtensionsCachingMemory.html",
    "title": "Namespace DragonHoard.MicrosoftExtensionsCachingMemory | DragonHoard API Reference",
    "keywords": "Namespace DragonHoard.MicrosoftExtensionsCachingMemory Classes MemoryCache In memory cache"
  },
  "api/Microsoft.Extensions.DependencyInjection.DragonHoardInMemoryRegistrationExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.DragonHoardInMemoryRegistrationExtensions.html",
    "title": "Class DragonHoardInMemoryRegistrationExtensions | DragonHoard API Reference",
    "keywords": "Class DragonHoardInMemoryRegistrationExtensions Reg extensions Inheritance object DragonHoardInMemoryRegistrationExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.Extensions.DependencyInjection Assembly: DragonHoard.InMemory.dll Syntax public static class DragonHoardInMemoryRegistrationExtensions Methods | Edit this page View Source AddInMemoryHoard(IServiceCollection?) Adds the dragon hoard. Declaration public static IServiceCollection? AddInMemoryHoard(this IServiceCollection? services) Parameters Type Name Description IServiceCollection services The services. Returns Type Description IServiceCollection The service collection | Edit this page View Source AddInMemoryHoard(IServiceCollection?, Action<InMemoryCacheOptions>) Adds the in memory hoard. Declaration public static IServiceCollection? AddInMemoryHoard(this IServiceCollection? services, Action<InMemoryCacheOptions> setupAction) Parameters Type Name Description IServiceCollection services The services. Action<InMemoryCacheOptions> setupAction The setup action. Returns Type Description IServiceCollection The service collection | Edit this page View Source RegisterInMemoryHoard(ICanisterConfiguration?) Registers the dragon hoard. Declaration public static ICanisterConfiguration? RegisterInMemoryHoard(this ICanisterConfiguration? bootstrapper) Parameters Type Name Description ICanisterConfiguration bootstrapper The bootstrapper. Returns Type Description ICanisterConfiguration The configuration object."
  },
  "api/Microsoft.Extensions.DependencyInjection.DragonHoardMemoryRegistrationExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.DragonHoardMemoryRegistrationExtensions.html",
    "title": "Class DragonHoardMemoryRegistrationExtensions | DragonHoard API Reference",
    "keywords": "Class DragonHoardMemoryRegistrationExtensions Reg extensions Inheritance object DragonHoardMemoryRegistrationExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.Extensions.DependencyInjection Assembly: DragonHoard.Microsoft.Extensions.Caching.Memory.dll Syntax public static class DragonHoardMemoryRegistrationExtensions Methods | Edit this page View Source AddMemoryCacheHoard(IServiceCollection?) Adds the dragon hoard. Declaration public static IServiceCollection? AddMemoryCacheHoard(this IServiceCollection? services) Parameters Type Name Description IServiceCollection services The services. Returns Type Description IServiceCollection The service collection | Edit this page View Source AddMemoryCacheHoard(IServiceCollection?, Action<MemoryCacheOptions>) Adds the dragon hoard. Declaration public static IServiceCollection? AddMemoryCacheHoard(this IServiceCollection? services, Action<MemoryCacheOptions> setupAction) Parameters Type Name Description IServiceCollection services The services. Action<MemoryCacheOptions> setupAction The setup action. Returns Type Description IServiceCollection The service collection | Edit this page View Source RegisterMemoryCacheHoard(ICanisterConfiguration?) Registers the dragon hoard. Declaration public static ICanisterConfiguration? RegisterMemoryCacheHoard(this ICanisterConfiguration? bootstrapper) Parameters Type Name Description ICanisterConfiguration bootstrapper The bootstrapper. Returns Type Description ICanisterConfiguration The configuration object."
  },
  "api/Microsoft.Extensions.DependencyInjection.DragonHoardRegistrationExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.DragonHoardRegistrationExtensions.html",
    "title": "Class DragonHoardRegistrationExtensions | DragonHoard API Reference",
    "keywords": "Class DragonHoardRegistrationExtensions Reg extensions Inheritance object DragonHoardRegistrationExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.Extensions.DependencyInjection Assembly: DragonHoard.Core.dll Syntax public static class DragonHoardRegistrationExtensions Methods | Edit this page View Source AddDragonHoard(IServiceCollection?) Adds the dragon hoard. Declaration public static IServiceCollection? AddDragonHoard(this IServiceCollection? services) Parameters Type Name Description IServiceCollection services The services. Returns Type Description IServiceCollection The service collection | Edit this page View Source RegisterDragonHoard(ICanisterConfiguration?) Registers the dragon hoard. Declaration public static ICanisterConfiguration? RegisterDragonHoard(this ICanisterConfiguration? bootstrapper) Parameters Type Name Description ICanisterConfiguration bootstrapper The bootstrapper. Returns Type Description ICanisterConfiguration The configuration object."
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection | DragonHoard API Reference",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes DragonHoardInMemoryRegistrationExtensions Reg extensions DragonHoardMemoryRegistrationExtensions Reg extensions DragonHoardRegistrationExtensions Reg extensions"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Welcome | DragonHoard API Reference",
    "keywords": "Welcome Welcome to the API browser."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Code | DragonHoard API Reference",
    "keywords": "Code using DragonHoard.Core; using Microsoft.Extensions.DependencyInjection; namespace DragonHoard.Example { /// <summary> /// Example class. /// </summary> internal class ExampleClass { /// <summary> /// Gets or sets a. /// </summary> /// <value> /// a. /// </value> public int A { get; set; } } /// <summary> /// Example program. /// </summary> internal class Program { /// <summary> /// Defines the entry point of the application. /// </summary> /// <param name=\"args\">The arguments.</param> private static void Main(string[] args) { // Create our service provider. var ServiceProvider = new ServiceCollection().AddCanisterModules()?.BuildServiceProvider(); // Get our cache provider. var CacheProvider = ServiceProvider?.GetService<Cache>(); if (CacheProvider is null) return; // Get our cache. This will create a new cache if one doesn't exist with the name \"Default\". var Cache = CacheProvider.GetOrAddCache(); if (Cache is null) return; // Add our data to the cache. Cache.Set(\"Test\", new ExampleClass { A = 12 }); // Check if our data is in the cache and retrieve it. Console.WriteLine(\"Data found: {0}\", Cache.TryGetValue(\"Test\", out ExampleClass value)); Console.WriteLine(\"Our stored data: {0}\", value.A); } } } Output Data found: True Our stored data: 12"
  },
  "index.html": {
    "href": "index.html",
    "title": "Dragon Hoard | DragonHoard API Reference",
    "keywords": "Dragon Hoard Dragon Hoard is a fast, thread safe, developer friendly in-memory caching service. Setting Up the Library Dragon Hoard can be set up using the ServiceCollection extension depending on the cache you want to set up: ServiceCollection.AddInMemoryHoard(); The above code adds the faster/lighter in-memory cache while: ServiceCollection.AddMemoryCacheHoard(); That allows the system to wrap Microsoft.Extensions.Caching.Memory.MemoryCache. Note that they are in separate Nuget packages so you'll have to download the one that you want. Basic Usage The main class of interest is the Cache class found in DragonHoard.Core: public class ExampleClass { public ExampleClass(Cache myCache) { MyCache = myCache; } private Cache MyCache { get; set; } public void SomeMethod() { var Cache = MyCache.GetOrAddCache(\"CacheName\"); } } The Cache object has a singleton lifespan and acts as a repository for your various caches. Note that it's generally a good idea to split caches based on their purpose so they can be treated accordingly and to reduce read/write contention. Once you have the ICache object that the GetOrAddCache method returns you have a couple of methods: Cache.Set(...) // Used to set a key/value pair in the cache using various settings. You can specify absolute expiration, sliding, priority, size, and any tags that should be associated with the entry. Cache.Remove(...) // Used to remove an entry based on the key. Cache.TryGetValue(...) // Used to retrieve an entry from the cache based on the key. Cache.RemoveByTag(...) // Will remove all entries that have been tagged with the corresponding string. Cache.GetByTag(...) // Returns an array containing all entries that were tagged using the string. Cache.Compact(...) // Used to remove a percentage of items from the cache. The cache will clear out invalid items on a scheduled period based on the criteria you set. However the schedule may only kick off after you call one of the above methods depending on the type of cache. Similarly the determination of what gets removed when calling Compact is specific to the individual cache provider. For instance, the in-memory provider uses these steps: Remove items that have expired. Put items into buckets based on priority and then go off this: Remove items where absolute expiration is set going earliest to latest. Remove items where sliding expiration is set going earliest to latest. Remove items based on last accessed date/time. Give Me Speed For those wondering why you'd want to use this over the MemoryCache provided by Microsoft, considering the following using the following setup: BenchmarkDotNet=v0.12.1, OS=Windows 10.0.18363.1256 (1909/November2018Update/19H2) Intel Core i7-9850H CPU 2.60GHz, 1 CPU, 12 logical and 6 physical cores .NET Core SDK=5.0.102 [Host] : .NET Core 5.0.2 (CoreCLR 5.0.220.61120, CoreFX 5.0.220.61120), X64 RyuJIT DefaultJob : .NET Core 5.0.2 (CoreCLR 5.0.220.61120, CoreFX 5.0.220.61120), X64 RyuJIT Adding and removing an item from the cache is about 4 times faster and uses about 1/5 of the memory overhead: Method Mean Error StdDev Median Ratio RatioSD Gen 0 Gen 1 Gen 2 Allocated InMemory 422.7 ns 7.29 ns 8.96 ns 420.4 ns 1.00 0.00 0.0401 - - 256 B MicrosoftMemory 2,123.0 ns 179.06 ns 527.96 ns 1,906.8 ns 3.96 0.29 0.2060 - - 1296 B Retrieval of an item from the cache is about 50% faster: Method Mean Error StdDev Median Ratio RatioSD Gen 0 Gen 1 Gen 2 Allocated InMemory 153.9 ns 3.06 ns 7.39 ns 151.5 ns 1.00 0.00 - - - - MicrosoftMemory 214.9 ns 14.32 ns 42.22 ns 200.0 ns 1.50 0.32 - - - - When creating/storing items at high throughput scenarios, the system is about 5x faster with reduced memory overhead even when aggressive cache cleanup is used: Method Mean Error StdDev Ratio RatioSD Gen 0 Gen 1 Gen 2 Allocated InMemory 1.043 μs 0.0934 μs 0.2557 μs 1.00 0.00 0.0362 0.0134 - 232 B MicrosoftMemory 4.900 μs 0.4043 μs 1.1920 μs 5.01 1.56 0.1755 0.0458 - 1200 B And updating an item already in the cache is 8x faster with 12x improvement on memory consumption: Method Mean Error StdDev Median Ratio RatioSD Gen 0 Gen 1 Gen 2 Allocated InMemory 257.2 ns 15.47 ns 45.12 ns 241.6 ns 1.00 0.00 0.0165 - - 104 B MicrosoftMemory 2,041.9 ns 204.26 ns 602.26 ns 1,785.9 ns 8.00 1.93 0.1907 - - 1200 B Installation The library is available via Nuget with the package name \"DragonHoard.InMemory\" or \"DragonHoard.Microsoft.Extensions.Caching.Memory\". To install it run the following command in the Package Manager Console: Install-Package DragonHoard.InMemory or Install-Package DragonHoard.Microsoft.Extensions.Caching.Memory Build Process In order to build the library you may require the following: Visual Studio 2019 Other than that, just clone the project and you should be able to load the solution and build without too much effort."
  }
}